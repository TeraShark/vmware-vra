<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns2:workflow xmlns:ns2="http://vmware.com/vco/workflow" root-name="item12" object-name="workflow:name=generic" id="a487f857-eb74-45de-9a25-67b460d5aa07" editor-version="2.0" version="0.1.0" api-version="6.0.0" allowed-operations="vef" restartMode="1" resumeFromFailedMode="0">
    <display-name>create-custom-resource-ansible-awx</display-name>
    <description>Workflow for Dynamic Types Creation (for Ansible AWX mediation) which creates all workflows for the Type and injects the Custom Resource into vRA. JSON input is a specific schema related to Ansible AWX.</description>
    <position y="50.0" x="120.0"/>
    <input>
        <param name="json" type="string"/>
    </input>
    <output/>
    <attrib name="namespaceRef" type="DynamicTypes:DynamicNamespaceDefinition">
        <value encoded="n"/>
    </attrib>
    <attrib name="token" type="string">
        <value encoded="n"></value>
    </attrib>
    <attrib name="wfid_update" type="string">
        <value encoded="n">bb3b44ee-fe9c-43fa-a246-2d4d98c1a1d4</value>
    </attrib>
    <attrib name="wfid_create" type="string">
        <value encoded="n">597baeeb-abfa-43e0-87ae-eaca6a4ef8d8</value>
    </attrib>
    <attrib name="wfid_delete" type="string">
        <value encoded="n">aa71e7d6-22d8-42b9-9794-f52d0c43309f</value>
    </attrib>
    <attrib name="icon" type="ResourceElement">
        <value encoded="n">dunes://service.dunes.ch/ResourceElement?id='ccc63028-0b79-48ad-bf8d-4078a2d058ce'&amp;dunesName='ResourceElement'</value>
    </attrib>
    <attrib name="workflowStubsCategory" type="WorkflowCategory">
        <value encoded="n">dunes://service.dunes.ch/WorkflowCategory?id='8a74805971f49d72017219ad7dfe0273'&amp;dunesName='WorkflowCategory'</value>
    </attrib>
    <attrib name="day2opWorkflows" type="Any">
        <value encoded="n"/>
    </attrib>
    <attrib name="namespace" type="string">
        <value encoded="n"></value>
        <description>eg: com.company.types</description>
    </attrib>
    <attrib name="configurations" type="Array/ConfigurationElement">
        <value encoded="n">[]</value>
    </attrib>
    <attrib name="vROServer" type="Any">
        <value encoded="n"/>
    </attrib>
    <attrib name="vRAServer" type="Any">
        <value encoded="n"/>
    </attrib>
    <attrib name="finderWorkflowIDs" type="Properties">
        <value encoded="n">#[##]#</value>
        <description>typeName: [IDs]</description>
    </attrib>
    <attrib name="payload" type="Any">
        <value encoded="n"/>
    </attrib>
    <attrib name="actionResult" type="string">
        <value encoded="n"></value>
    </attrib>
    <workflow-item name="item0" type="end" end-mode="0" comparator="0">
        <in-binding/>
        <out-binding/>
        <position y="110.0" x="120.0"/>
    </workflow-item>
    <workflow-item name="item9" out-name="item15" type="task" comparator="0">
        <display-name>Create Namespace</display-name>
        <script encoded="false">// Validate input values
if (namespace == null || namespace.trim().length == 0) {
  throw "Undefined namespace: namespace cannot be null or empty";
}
var namespaceDef = DynamicTypesManager.getNamespace(namespace);
// Define namespace
if (!namespaceDef){
  namespaceDef = DynamicTypesManager.defineNamespace(namespace);
  System.log("Created dynamic namespace: " + namespaceDef);
} 

namespaceRef = namespaceDef;</script>
        <in-binding>
            <bind name="namespace" type="string" export-name="namespace"/>
        </in-binding>
        <out-binding>
            <bind name="namespaceRef" type="DynamicTypes:DynamicNamespaceDefinition" export-name="namespaceRef"/>
        </out-binding>
        <description>Simple task with custom script capability.</description>
        <position y="120.0" x="300.0"/>
    </workflow-item>
    <workflow-item name="item12" out-name="item13" type="task" comparator="0">
        <display-name>parse JSON</display-name>
        <script encoded="false">var p = JSON.parse(json);

namespace = p.namespace;
vROServer = p.vROServer;
vRAServer = p.vRAServer;

//TODO: Validate required JSON fields

payload = p;

System.debug("Parsed JSON...");

</script>
        <in-binding>
            <bind name="json" type="string" export-name="json"/>
        </in-binding>
        <out-binding>
            <bind name="namespace" type="string" export-name="namespace"/>
            <bind name="vROServer" type="Any" export-name="vROServer"/>
            <bind name="vRAServer" type="Any" export-name="vRAServer"/>
            <bind name="payload" type="Any" export-name="payload"/>
        </out-binding>
        <description>Simple task with custom script capability.</description>
        <position y="60.0" x="187.27272727272725"/>
    </workflow-item>
    <workflow-item name="item13" out-name="item9" type="task" comparator="0">
        <display-name>Define Endpoints</display-name>
        <script encoded="false">
payload.types[0].isSuppliedRoot = true;
payload.types[0].parentType = "Endpoint";


System.debug("Defining inherent parent base type: Endpoint...");
var baseType = { "typeName": "Endpoint",
        "containerName": "Endpoints",
        "isBaseType": true,
        "typeProperties": [],
        "childTypes": payload.types };

payload.types = [baseType];

setParentTypes(payload.types, null);

//System.debug(JSON.stringify(payload.types));

var category = namespace + ".Endpoints";

var ansibleServers = payload.AnsibleServers;
System.debug("Iterating [" + ansibleServers.length + "] Ansible endpoints...");

ansibleServers.forEach(function(server){
    try{
        var elem = Server.createConfigurationElement(category, server.EndpointName);
        
        Object.keys(server).forEach(function(key){
            var typeHint = "string";
            if(key == "password" || key == "authKey")
                typeHint = "SecureString";

            elem.setAttributeWithKey(key, server[key], typeHint);
        });
        System.debug("Created Configuration: " + server.EndpointName);
    }
    catch(e){
        System.error("Unable to create Configuration: " + e.message);
    }
});


function setParentTypes(types, parent){
    types.forEach(function(type){
        if(parent != null)
            type.parentType = parent;
        if(type.childTypes != null){
            setParentTypes(type.childTypes, type.typeName);
        }
    });
}

/*{ //Sample Server:
    "EndpointName": "UK-PROD",
    "host": "https://ansible-01a.ukprod.corp.local",
    "username": "",
    "password": "",
    "authType": "oauth",
    "authKey": "b6r4q31caadgnwatjj7e7wrva6rh7jt"
}*/

</script>
        <in-binding>
            <bind name="namespace" type="string" export-name="namespace"/>
            <bind name="payload" type="Any" export-name="payload"/>
        </in-binding>
        <out-binding>
            <bind name="configurations" type="Array/ConfigurationElement" export-name="configurations"/>
            <bind name="payload" type="Any" export-name="payload"/>
        </out-binding>
        <description>Simple task with custom script capability.</description>
        <position y="60.0" x="300.0"/>
    </workflow-item>
    <workflow-item name="item15" out-name="item0" type="task" script-module="com.vmware.pso.types.ansible/generateAWXMediation" comparator="0">
        <display-name>Do Magic Stuff</display-name>
        <script encoded="false">//Auto generated script, cannot be modified !
actionResult = System.getModule("com.vmware.pso.types.ansible").generateAWXMediation(icon,namespaceDefinition,json,workflowStubsCategory);
</script>
        <in-binding>
            <bind name="icon" type="ResourceElement" export-name="icon">
                <description></description>
            </bind>
            <bind name="namespaceDefinition" type="DynamicTypes:DynamicNamespaceDefinition" export-name="namespaceRef">
                <description></description>
            </bind>
            <bind name="json" type="Any" export-name="payload">
                <description></description>
            </bind>
            <bind name="workflowStubsCategory" type="WorkflowCategory" export-name="workflowStubsCategory">
                <description></description>
            </bind>
        </in-binding>
        <out-binding>
            <bind name="actionResult" type="string" export-name="actionResult"/>
        </out-binding>
        <description>Add a note to the workflow schema.</description>
        <position y="120.0" x="180.0"/>
    </workflow-item>
    <presentation>
        <p-param name="json">
            <desc>json</desc>
        </p-param>
    </presentation>
</ns2:workflow>
