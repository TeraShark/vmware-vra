<?xml version='1.0' encoding='UTF-8'?>
<workflow xmlns="http://vmware.com/vco/workflow" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://vmware.com/vco/workflow http://vmware.com/vco/workflow/Workflow-v4.xsd" root-name="item2" object-name="workflow:name=generic" id="3f4fe39c-5652-4498-bb83-269b112d1d49" version="0.0.2" api-version="6.0.0" allowed-operations="evf" editor-version="2.0" restartMode="1" resumeFromFailedMode="0">
  <display-name><![CDATA[cleanup types]]></display-name>
  <position y="50.0" x="100.0"/>
  <input>
    <param name="typeName" type="string"/>
    <param name="namespace" type="string"/>
  </input>
  <attrib name="token" type="string" read-only="false">
    <value encoded="n"><![CDATA[]]></value>
  </attrib>
  <workflow-item name="item0" type="end" end-mode="0">
    <in-binding/>
    <position y="50.0" x="460.0"/>
  </workflow-item>
  <workflow-item name="item1" out-name="item0" type="task">
    <display-name><![CDATA[Clean up]]></display-name>
    <script encoded="false"><![CDATA[var wfIds = [];

if ((namespace.length > 6) && (typeName.length > 3 || typeName == "*")){
    DynamicTypesManager.removeAll();
    System.debug("Deleted all Types...");
    
    System.debug("Finding Associated Workflows...");
    var wfs = Server.findAllForType("Workflow");
    for each(var wf in wfs){
        if (typeName == "*"){
            if (wf.name.indexOf(namespace) >= 0){
                System.debug("Found WF: " + wf.id + "|" + wf.name);
                wfIds.push(wf.id);
        }
        }else{
            if (wf.name.indexOf(typeName)>= 0){
                System.debug("Found WF: " + wf.id + "|" + wf.name);
                wfIds.push(wf.id);
            }
        }
    }
}
else{
    throw "TypeName and Namespace length must be > 4 - possible danger!";
}

//Remove Configurations:
try{
   
    var cat = Server.getConfigurationElementCategoryWithPath(namespace);
    if (cat)
        Server.removeConfigurationElementCategory(cat);
    cat = Server.getConfigurationElementCategoryWithPath(namespace + ".Endpoints");
    if (cat)
        Server.removeConfigurationElementCategory(cat);

    if(typeName == "*"){
        Server.getAllConfigurationElementCategories().forEach(function (cat){
            //System.debug(cat.name);
            if(cat.name.indexOf(namespace) == 0){
                System.debug("Deleting Configuration: " + cat.name);
                Server.removeConfigurationElementCategory(cat);
            }
        });
    }

    System.debug("Removed Configurations for: " + namespace);
    
} catch(e){ System.debug("Error deleting Configs: " + e.toString());}

//delete each workflow:
//https://cava-6-240-202.eng.vmware.com/vco-controlcenter/client/api/platform/workflows/ac202aba-5d0c-4e54-8390-1fae9dff3ec9

var RestHostFactory = System.getModule("com.vmware.pscoe.library.rest").RestHostFactory();
var RestClient = System.getModule("com.vmware.pscoe.library.rest").RestClient();


var endpointUrl = "https://cava-6-244-082.eng.vmware.com";
var endpointName = "vRA";
var requestContent = {};
requestContent.username = "configadmin";
requestContent.password = "VMware1!";

var restHost = RestHostFactory.newHostWithBasicAuth(endpointUrl, endpointName, requestContent.username, requestContent.password); 
var restClient = new RestClient(restHost);
System.debug("Deleting " + wfIds.length + " Workflows...");
wfIds.forEach(function(id){
    System.debug("Deleting Workflow: " + id);
    _delete('/vco-controlcenter/client/api/platform/workflows/{wfId}', [id]);
});


///vco-controlcenter/client/api/platform/categories/8a7480e9721eb53d01729eeddba430e1


//System.debug(httpData.contentAsString);

var actionCat = "";

var json = JSON.parse(_get('/vco-controlcenter/client/api/platform/categories', []));
try{
    json.link.forEach(function(link){
        var found = false;
        link.attributes.forEach(function(attrib){
            if(attrib.name == "name" && attrib.value == namespace){
                System.debug("found Cat, getting id...");
                found = true;
            }
            if(found && attrib.name == "id"){
                actionCat = attrib.value;
                throw "found";
            }

        });
    });
}
catch(e){}
System.debug(actionCat);

json = JSON.parse(_get('/vco-controlcenter/client/api/platform/categories/{id}', [actionCat]));
//System.debug(JSON.stringify(json));

/*{
  "href": "https://cava-6-240-202.eng.vmware.com:443/vco-controlcenter/client/api/platform/categories/8a74805971f49d72017218511653015b/",
  "relations": {
    "link": [
      {
        "attributes": [
          {
            "value": "1e862838-a615-304b-8401-8d2532564c64",
            "name": "id"
          },
          {
            "value": "ScriptModule",
            "name": "type"
          },
          {
            "value": "AssertValidator",
            "name": "name"
          },
          {
            "value": "Wrapper around the Validator. Provides custom error messages to be thrown if the validation fails.",
            "name": "description"
          }
        ],
        "href": "https://cava-6-240-202.eng.vmware.com:443/vco-controlcenter/client/api/platform/actions/1e862838-a615-304b-8401-8d2532564c64/",
        "rel": "down"
      }, */

var filtered = [];
if(json.relations && json.relations.link){
    filtered = json.relations.link.filter(function (link){
        if(link.attributes){
          //console.debug(link.attributes);
          return link.attributes.filter(function (attribute){
              return attribute.name == "type" && attribute.value == "ScriptModule";
          } ).length > 0;
        }
        return true;
    });
}

var ids = [];
filtered.forEach(function(link){
  if(link.attributes){
    link.attributes.forEach(function(attrib){
      if(attrib.name == "id")
        ids.push(attrib.value);
    });
  }
});

System.debug("Deleting " + ids.length + " Actions...");
ids.forEach(function(actionId){
    System.debug("Deleting Action: " + actionId)
    _delete('/vco-controlcenter/client/api/platform/actions/{actionId}', [actionId]);
});


function _get(path, params){
    System.debug("Fetching Object via API... ");
    var request = createQueryRequest(path, params);
    var httpData = restClient.get(request.path, request.params, request.options);
    if (httpData.statusCode != 200){
        throw "Error calling API. Received Status Code: " + httpData.statusCode;
    }
    return httpData.contentAsString;
}

function _delete(path, params){
    
    System.debug("Deleting Object via API... ");
    var request = createQueryRequest(path, params);
    var httpData = restClient.delete(request.path, request.params, request.options);
    if (httpData.statusCode != 200){
        throw "Error calling API. Received Status Code: " + httpData.statusCode;
    }
    return httpData.contentAsString;
}

function createQueryRequest(path, params){
    return {
        path: path,
        params: params,
        options: {
            skipEncodeParams: true,	
            returnResponseObject: true,		
            returnResponseObjectForReal: false, 	
            stringifyJsonContent: false,	
            interpretResponseCode: false,	
            headers: {
                //'Content-Type': 'application/json',
                'Accept': 'application/json',
                'Authorization': 'Bearer ' + token
            },
            errorHandler: {					//Defines a retry mechanism in case of failed requests
                numberOfRetries: 3,			//Number of retries
                retryWaitInterval: 15,			//Polling interval in seconds
                errorsToRetry: ["Read timed out"]	//Specific errors to retry (Default: ["Connection pool shut down"])
            }
        }
    };
}

]]></script>
    <in-binding>
      <bind name="typeName" type="string" export-name="typeName"/>
      <bind name="token" type="string" export-name="token"/>
      <bind name="namespace" type="string" export-name="namespace"/>
    </in-binding>
    <out-binding/>
    <description><![CDATA[Simple task with custom script capability.]]></description>
    <position y="60.0" x="300.0"/>
  </workflow-item>
  <workflow-item name="item2" out-name="item1" type="task">
    <display-name><![CDATA[Token]]></display-name>
    <script encoded="false"><![CDATA[
var RestHostFactory = System.getModule("com.vmware.pscoe.library.rest").RestHostFactory();
var RestClient = System.getModule("com.vmware.pscoe.library.rest").RestClient();


var endpointUrl = "https://cava-6-244-082.eng.vmware.com";
var endpointName = "vRA";
var requestContent = {};
requestContent.username = "configadmin";
requestContent.password = "VMware1!";

var restHost = RestHostFactory.newHostWithBasicAuth(endpointUrl, endpointName, requestContent.username, requestContent.password); 
var restClient = new RestClient(restHost);

var request = {
    path: '/csp/gateway/am/api/login?access_token=',
    params: [],
    content: JSON.stringify(requestContent),
    options: {
        skipEncodeParams: true,	
        returnResponseObject: true,		
        returnResponseObjectForReal: false, 	
        stringifyJsonContent: false,	
        interpretResponseCode: false,	
        headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        },
        errorHandler: {					//Defines a retry mechanism in case of failed requests
            numberOfRetries: 3,			//Number of retries
            retryWaitInterval: 15,			//Polling interval in seconds
            errorsToRetry: ["Read timed out"]	//Specific errors to retry (Default: ["Connection pool shut down"])
        }
    }
};
System.debug("Calling API...");
//var urlTemplate = "workflows/{id}";

var httpData = restClient.post(request.path, request.params, request.content, request.options);
if (httpData.statusCode != 200){
    throw "Error calling API. Received Status Code: " + httpData.statusCode;
}
var access_token = JSON.parse(httpData.contentAsString).access_token;
token = access_token;

]]></script>
    <in-binding/>
    <out-binding>
      <bind name="token" type="string" export-name="token"/>
    </out-binding>
    <description><![CDATA[Simple task with custom script capability.]]></description>
    <position y="60.0" x="180.0"/>
  </workflow-item>
  <presentation/>
</workflow>