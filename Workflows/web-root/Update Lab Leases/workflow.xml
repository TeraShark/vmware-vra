<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ns2:workflow xmlns:ns2="http://vmware.com/vco/workflow" root-name="item1" object-name="workflow:name=generic" id="21d8b66e-fbb9-426b-82df-42f93b9269a8" editor-version="2.0" version="0.0.2" api-version="6.0.0" restartMode="1" resumeFromFailedMode="0">
    <display-name>Update Lab Leases</display-name>
    <position y="50.0" x="100.0"/>
    <input/>
    <output/>
    <attrib name="token" type="string">
        <value encoded="n"></value>
    </attrib>
    <attrib name="requestId" type="string">
        <value encoded="n"></value>
    </attrib>
    <workflow-item name="item0" type="end" end-mode="0" comparator="0">
        <in-binding/>
        <out-binding/>
        <position y="120.0" x="100.0"/>
    </workflow-item>
    <workflow-item name="item1" out-name="item2" type="task" comparator="0">
        <display-name>Token</display-name>
        <script encoded="false">&#13;
var RestHostFactory = System.getModule("com.vmware.pscoe.library.rest").RestHostFactory();&#13;
var RestClient = System.getModule("com.vmware.pscoe.library.rest").RestClient();&#13;
&#13;
&#13;
//https://api.mgmt.cloud.vmware.com/iaas/api/login&#13;
&#13;
var endpointUrl = "https://api.mgmt.cloud.vmware.com";&#13;
var endpointName = "vRA";&#13;
var requestContent = {"refreshToken":"8g7SO1eTLBlHNO3A2Fn7EsAvzrJ79EgSQonKCE2soeCuARnIGe7ZByMeriyQJYvT"};&#13;
&#13;
&#13;
var restHost = RestHostFactory.newHostWithBasicAuth(endpointUrl, endpointName, "", ""); &#13;
var restClient = new RestClient(restHost);&#13;
&#13;
var request = {&#13;
    path: '/iaas/api/login',&#13;
    params: [],&#13;
    content: requestContent,&#13;
    options: {&#13;
        skipEncodeParams: true,	&#13;
        returnResponseObject: true,		&#13;
        returnResponseObjectForReal: false, 	&#13;
        stringifyJsonContent: true,	&#13;
        interpretResponseCode: false,	&#13;
        headers: {&#13;
            'Accept-Encoding': 'gzip, deflate, br',&#13;
            'Content-Type': 'application/json',&#13;
            'Accept': 'application/json',&#13;
            'Cache-Control':'no-cache'&#13;
        },&#13;
        errorHandler: {					//Defines a retry mechanism in case of failed requests&#13;
            numberOfRetries: 3,			//Number of retries&#13;
            retryWaitInterval: 15,			//Polling interval in seconds&#13;
            errorsToRetry: ["Read timed out"]	//Specific errors to retry (Default: ["Connection pool shut down"])&#13;
        }&#13;
    }&#13;
};&#13;
System.debug("Calling Auth API...");&#13;
&#13;
var httpData = restClient.post(request.path, request.params, request.content, request.options);&#13;
if (httpData.statusCode != 200){&#13;
    throw "Error calling API. Received Status Code: " + httpData.statusCode;&#13;
}&#13;
&#13;
System.debug(httpData.contentAsString);&#13;
var response = JSON.parse(httpData.contentAsString);&#13;
System.debug("Obtained API Access Token...");&#13;
System.debug(response.token.toString());&#13;
token = response.token.toString();&#13;
&#13;
</script>
        <in-binding/>
        <out-binding>
            <bind name="token" type="string" export-name="token"/>
        </out-binding>
        <description>Simple task with custom script capability.</description>
        <position y="60.0" x="180.0"/>
    </workflow-item>
    <workflow-item name="item2" out-name="item4" type="task" comparator="0">
        <display-name>Renew Lease</display-name>
        <script encoded="false">&#13;
System.sleep(5000);//Sleep 5s for token to register...&#13;
&#13;
var RestHostFactory = System.getModule("com.vmware.pscoe.library.rest").RestHostFactory();&#13;
var RestClient = System.getModule("com.vmware.pscoe.library.rest").RestClient();&#13;
&#13;
//https://api.mgmt.cloud.vmware.com/deployment/api/deployments/1247938e-a3d6-4a3c-9621-af8c7b7b0937/requests&#13;
var endpointUrl = "https://api.mgmt.cloud.vmware.com";&#13;
var endpointName = "vRA";&#13;
var exp = new Date();&#13;
exp.setDate(exp.getDate() + 4);&#13;
var requestContent = {&#13;
  "actionId": "Deployment.ChangeLease",&#13;
  "inputs": {"Lease Expiration Date": exp},&#13;
  "reason": "Required for Lab Testing"&#13;
};&#13;
&#13;
System.debug(token);&#13;
&#13;
var restHost = RestHostFactory.newHostWithBasicAuth(endpointUrl, endpointName, "", ""); &#13;
var restClient = new RestClient(restHost);&#13;
&#13;
var request = {&#13;
    path: '/deployment/api/deployments/{deployment_id}/requests/',&#13;
    params: ["1247938e-a3d6-4a3c-9621-af8c7b7b0937"],&#13;
    content: requestContent,&#13;
    options: {&#13;
        skipEncodeParams: true,	&#13;
        returnResponseObject: true,		&#13;
        returnResponseObjectForReal: false, 	&#13;
        stringifyJsonContent: true,	&#13;
        interpretResponseCode: false,	&#13;
        headers: {&#13;
            'Accept-Encoding': 'gzip, deflate, br',&#13;
            'Content-Type': 'application/json',&#13;
            'Accept': 'application/json',&#13;
            'Cache-Control':'no-cache',&#13;
            'Authorization': 'Bearer ' + token&#13;
        },&#13;
        errorHandler: {					//Defines a retry mechanism in case of failed requests&#13;
            numberOfRetries: 3,			//Number of retries&#13;
            retryWaitInterval: 15,			//Polling interval in seconds&#13;
            errorsToRetry: ["Read timed out"]	//Specific errors to retry (Default: ["Connection pool shut down"])&#13;
        }&#13;
    }&#13;
};&#13;
System.debug("Requesting Extension for " + exp);&#13;
System.debug(JSON.stringify(requestContent));&#13;
//var urlTemplate = "workflows/{id}";&#13;
&#13;
var httpData = restClient.post(request.path, request.params, request.content, request.options);&#13;
if (httpData.statusCode != 200){&#13;
    throw "Error calling API. Received Status Code: " + httpData.statusCode;&#13;
}&#13;
var json = JSON.parse(httpData.contentAsString);&#13;
//System.log(access_token);&#13;
System.debug("Request sent: " + json.status);&#13;
requestId = json.id;&#13;
&#13;
&#13;
</script>
        <in-binding>
            <bind name="token" type="string" export-name="token"/>
        </in-binding>
        <out-binding>
            <bind name="requestId" type="string" export-name="requestId"/>
        </out-binding>
        <description>Simple task with custom script capability.</description>
        <position y="60.0" x="285.0"/>
    </workflow-item>
    <workflow-item name="item3" type="task" comparator="0">
        <display-name>Authorize</display-name>
        <script encoded="false">//https://console.cloud.vmware.com/csp/gateway/am/api/auth/api-tokens/authorize&#13;
&#13;
&#13;
var RestHostFactory = System.getModule("com.vmware.pscoe.library.rest").RestHostFactory();&#13;
var RestClient = System.getModule("com.vmware.pscoe.library.rest").RestClient();&#13;
&#13;
&#13;
var endpointUrl = "https://console.cloud.vmware.com";&#13;
var endpointName = "vRA";&#13;
&#13;
&#13;
var restHost = RestHostFactory.newHostWithBasicAuth(endpointUrl, endpointName, "", ""); &#13;
var restClient = new RestClient(restHost);&#13;
&#13;
var request = {&#13;
    path: '/csp/gateway/am/api/auth/api-tokens/authorize',&#13;
    params: [],&#13;
    content: "refresh_token=8g7SO1eTLBlHNO3A2Fn7EsAvzrJ79EgSQonKCE2soeCuARnIGe7ZByMeriyQJYvT",&#13;
    options: {&#13;
        skipEncodeParams: true,	&#13;
        returnResponseObject: true,		&#13;
        returnResponseObjectForReal: false, 	&#13;
        stringifyJsonContent: false,	&#13;
        interpretResponseCode: false,	&#13;
        headers: {&#13;
            'Content-Type': 'application/x-www-form-urlencoded',&#13;
            'Accept': 'application/json'&#13;
        },&#13;
        errorHandler: {					//Defines a retry mechanism in case of failed requests&#13;
            numberOfRetries: 3,			//Number of retries&#13;
            retryWaitInterval: 15,			//Polling interval in seconds&#13;
            errorsToRetry: ["Read timed out"]	//Specific errors to retry (Default: ["Connection pool shut down"])&#13;
        }&#13;
    }&#13;
};&#13;
System.debug("Calling Auth API...");&#13;
//var urlTemplate = "workflows/{id}";&#13;
&#13;
var httpData = restClient.post(request.path, request.params, request.content, request.options);&#13;
if (httpData.statusCode != 200){&#13;
    throw "Error calling API. Received Status Code: " + httpData.statusCode;&#13;
}&#13;
&#13;
System.debug(httpData.contentAsString);&#13;
&#13;
</script>
        <in-binding/>
        <out-binding/>
        <description>Simple task with custom script capability.</description>
        <position y="130.0" x="600.0"/>
    </workflow-item>
    <workflow-item name="item4" out-name="item5" type="task" comparator="0">
        <display-name>Get Status</display-name>
        <script encoded="false">System.sleep(10000); //Wait 10s for request to complete&#13;
&#13;
&#13;
var RestHostFactory = System.getModule("com.vmware.pscoe.library.rest").RestHostFactory();&#13;
var RestClient = System.getModule("com.vmware.pscoe.library.rest").RestClient();&#13;
&#13;
//https://api.mgmt.cloud.vmware.com/deployment/api/deployments/1247938e-a3d6-4a3c-9621-af8c7b7b0937/requests&#13;
var endpointUrl = "https://api.mgmt.cloud.vmware.com";&#13;
var endpointName = "vRA";&#13;
&#13;
&#13;
var restHost = RestHostFactory.newHostWithBasicAuth(endpointUrl, endpointName, "", ""); &#13;
var restClient = new RestClient(restHost);&#13;
//https://api.mgmt.cloud.vmware.com/deployment/api/deployments/1247938e-a3d6-4a3c-9621-af8c7b7b0937/requests/{{requestid}}&#13;
var request = {&#13;
    path: '/deployment/api/deployments/{deployment_id}/requests/{requestId}',&#13;
    params: ["1247938e-a3d6-4a3c-9621-af8c7b7b0937", requestId],&#13;
    &#13;
    options: {&#13;
        skipEncodeParams: true,	&#13;
        returnResponseObject: true,		&#13;
        returnResponseObjectForReal: false, 	&#13;
        stringifyJsonContent: true,	&#13;
        interpretResponseCode: false,	&#13;
        headers: {&#13;
            'Accept-Encoding': 'gzip, deflate, br',&#13;
            'Accept': 'application/json',&#13;
            'Cache-Control':'no-cache',&#13;
            'Authorization': 'Bearer ' + token&#13;
        },&#13;
        errorHandler: {					//Defines a retry mechanism in case of failed requests&#13;
            numberOfRetries: 3,			//Number of retries&#13;
            retryWaitInterval: 15,			//Polling interval in seconds&#13;
            errorsToRetry: ["Read timed out"]	//Specific errors to retry (Default: ["Connection pool shut down"])&#13;
        }&#13;
    }&#13;
};&#13;
System.debug("Checking Request Status...");&#13;
&#13;
//var urlTemplate = "workflows/{id}";&#13;
&#13;
var httpData = restClient.get(request.path, request.params, request.options);&#13;
if (httpData.statusCode != 200){&#13;
    throw "Error calling API. Received Status Code: " + httpData.statusCode;&#13;
}&#13;
var json = JSON.parse(httpData.contentAsString);&#13;
//System.log(access_token);&#13;
System.debug("Request verified: " + json.status);&#13;
&#13;
&#13;
&#13;
</script>
        <in-binding>
            <bind name="token" type="string" export-name="token"/>
            <bind name="requestId" type="string" export-name="requestId"/>
        </in-binding>
        <out-binding/>
        <description>Simple task with custom script capability.</description>
        <position y="60.0" x="400.0"/>
    </workflow-item>
    <workflow-item name="item5" out-name="item6" type="task" comparator="0">
        <display-name>token</display-name>
        <script encoded="false">&#13;
var RestHostFactory = System.getModule("com.vmware.pscoe.library.rest").RestHostFactory();&#13;
var RestClient = System.getModule("com.vmware.pscoe.library.rest").RestClient();&#13;
&#13;
&#13;
//https://us08-1-vralb.oc.vmware.com/identity/api/tokens&#13;
&#13;
var endpointUrl = "https://us08-1-vralb.oc.vmware.com";&#13;
var endpointName = "vRA";&#13;
var requestContent = {"username":"achris","password":"Liv16Bas1031!","tenant":"Cava"};&#13;
&#13;
&#13;
var restHost = RestHostFactory.newHostWithBasicAuth(endpointUrl, endpointName, "", ""); &#13;
var restClient = new RestClient(restHost);&#13;
&#13;
var request = {&#13;
    path: '/identity/api/tokens',&#13;
    params: [],&#13;
    content: requestContent,&#13;
    options: {&#13;
        skipEncodeParams: true,	&#13;
        returnResponseObject: true,		&#13;
        returnResponseObjectForReal: false, 	&#13;
        stringifyJsonContent: true,	&#13;
        interpretResponseCode: true,	&#13;
        headers: {&#13;
            //'Accept-Encoding': 'gzip, deflate, br',&#13;
            'Content-Type': 'application/json',&#13;
            'Accept': 'application/json',&#13;
            //'Cache-Control':'no-cache'&#13;
        },&#13;
        errorHandler: {					//Defines a retry mechanism in case of failed requests&#13;
            numberOfRetries: 3,			//Number of retries&#13;
            retryWaitInterval: 15,			//Polling interval in seconds&#13;
            errorsToRetry: ["Read timed out"]	//Specific errors to retry (Default: ["Connection pool shut down"])&#13;
        }&#13;
    }&#13;
};&#13;
System.debug("Calling Auth API...");&#13;
&#13;
var httpData = restClient.post(request.path, request.params, request.content, request.options);&#13;
if (httpData.statusCode != 200){&#13;
    throw "Error calling API. Received Status Code: " + httpData.statusCode;&#13;
}&#13;
System.debug(httpData.statusCode);&#13;
//System.debug(httpData.contentLength);&#13;
&#13;
var response = JSON.parse(httpData.contentAsString);&#13;
System.debug("Obtained API Access Token...");&#13;
//System.debug(response.token.toString());&#13;
token = response.id;&#13;
&#13;
</script>
        <in-binding/>
        <out-binding>
            <bind name="token" type="string" export-name="token"/>
        </out-binding>
        <description>Simple task with custom script capability.</description>
        <position y="130.0" x="400.0"/>
    </workflow-item>
    <workflow-item name="item6" out-name="item7" type="task" comparator="0">
        <display-name>renew vCenter</display-name>
        <script encoded="false">&#13;
System.sleep(5000);//Sleep 5s for token to register...&#13;
&#13;
var RestHostFactory = System.getModule("com.vmware.pscoe.library.rest").RestHostFactory();&#13;
var RestClient = System.getModule("com.vmware.pscoe.library.rest").RestClient();&#13;
&#13;
//https://us08-1-vralb.oc.vmware.com/catalog-service/api/consumer/resources/fab37afc-38ac-4646-8d01-ec1f74ddfabf/actions/a43ee0e3-3ff1-4565-a310-cd8d9ddb74f9/requests&#13;
var endpointUrl = "https://us08-1-vralb.oc.vmware.com";&#13;
var endpointName = "vRA";&#13;
var exp = new Date();&#13;
exp.setDate(exp.getDate() + 4);&#13;
var requestContent = {&#13;
    "type": "com.vmware.vcac.catalog.domain.request.CatalogResourceRequest",&#13;
    "resourceId": "17784e3d-80b6-4989-a52a-db0f68db6766",&#13;
    "actionId": "a43ee0e3-3ff1-4565-a310-cd8d9ddb74f9",&#13;
    "description": "Extend Lease",&#13;
    "reasons": "Required for testing",&#13;
    "data": {&#13;
        "provider-ExpirationDate": exp&#13;
    }&#13;
}&#13;
&#13;
System.debug(token);&#13;
&#13;
var restHost = RestHostFactory.newHostWithBasicAuth(endpointUrl, endpointName, "", ""); &#13;
var restClient = new RestClient(restHost);&#13;
&#13;
var request = {&#13;
    path: '/catalog-service/api/consumer/resources/17784e3d-80b6-4989-a52a-db0f68db6766/actions/a43ee0e3-3ff1-4565-a310-cd8d9ddb74f9/requests',&#13;
    params: [],&#13;
    content: requestContent,&#13;
    options: {&#13;
        skipEncodeParams: true,	&#13;
        returnResponseObject: true,		&#13;
        returnResponseObjectForReal: false, 	&#13;
        stringifyJsonContent: true,	&#13;
        interpretResponseCode: false,	&#13;
        headers: {&#13;
            'Accept-Encoding': 'gzip, deflate, br',&#13;
            'Content-Type': 'application/json',&#13;
            'Accept': 'application/json',&#13;
            'Cache-Control':'no-cache',&#13;
            'Authorization': 'Bearer ' + token&#13;
        },&#13;
        errorHandler: {					//Defines a retry mechanism in case of failed requests&#13;
            numberOfRetries: 3,			//Number of retries&#13;
            retryWaitInterval: 15,			//Polling interval in seconds&#13;
            errorsToRetry: ["Read timed out"]	//Specific errors to retry (Default: ["Connection pool shut down"])&#13;
        }&#13;
    }&#13;
};&#13;
System.debug("Requesting Extension for " + exp);&#13;
System.debug(JSON.stringify(requestContent));&#13;
//var urlTemplate = "workflows/{id}";&#13;
&#13;
var httpData = restClient.post(request.path, request.params, request.content, request.options);&#13;
if (httpData.statusCode != 201){&#13;
    throw "Error calling API. Received Status Code: " + httpData.statusCode;&#13;
}&#13;
//var json = JSON.parse(httpData.contentAsString);&#13;
//System.log(access_token);&#13;
&#13;
&#13;
&#13;
</script>
        <in-binding>
            <bind name="token" type="string" export-name="token"/>
        </in-binding>
        <out-binding/>
        <description>Simple task with custom script capability.</description>
        <position y="130.0" x="300.0"/>
    </workflow-item>
    <workflow-item name="item7" out-name="item0" type="task" comparator="0">
        <display-name>renew CentOS</display-name>
        <script encoded="false">&#13;
System.sleep(5000);//Sleep 5s for token to register...&#13;
&#13;
var RestHostFactory = System.getModule("com.vmware.pscoe.library.rest").RestHostFactory();&#13;
var RestClient = System.getModule("com.vmware.pscoe.library.rest").RestClient();&#13;
&#13;
//https://us08-1-vralb.oc.vmware.com/catalog-service/api/consumer/resources/fab37afc-38ac-4646-8d01-ec1f74ddfabf/actions/a43ee0e3-3ff1-4565-a310-cd8d9ddb74f9/requests&#13;
var endpointUrl = "https://us08-1-vralb.oc.vmware.com";&#13;
var endpointName = "vRA";&#13;
var exp = new Date();&#13;
exp.setDate(exp.getDate() + 4);&#13;
var requestContent = {&#13;
    "type": "com.vmware.vcac.catalog.domain.request.CatalogResourceRequest",&#13;
    "resourceId": "fab37afc-38ac-4646-8d01-ec1f74ddfabf",&#13;
    "actionId": "a43ee0e3-3ff1-4565-a310-cd8d9ddb74f9",&#13;
    "description": "Extend Lease",&#13;
    "reasons": "Required for testing",&#13;
    "data": {&#13;
        "provider-ExpirationDate": exp&#13;
    }&#13;
}&#13;
&#13;
System.debug(token);&#13;
&#13;
var restHost = RestHostFactory.newHostWithBasicAuth(endpointUrl, endpointName, "", ""); &#13;
var restClient = new RestClient(restHost);&#13;
&#13;
var request = {&#13;
    path: '/catalog-service/api/consumer/resources/fab37afc-38ac-4646-8d01-ec1f74ddfabf/actions/a43ee0e3-3ff1-4565-a310-cd8d9ddb74f9/requests',&#13;
    params: [],&#13;
    content: requestContent,&#13;
    options: {&#13;
        skipEncodeParams: true,	&#13;
        returnResponseObject: true,		&#13;
        returnResponseObjectForReal: false, 	&#13;
        stringifyJsonContent: true,	&#13;
        interpretResponseCode: false,	&#13;
        headers: {&#13;
            'Accept-Encoding': 'gzip, deflate, br',&#13;
            'Content-Type': 'application/json',&#13;
            'Accept': 'application/json',&#13;
            'Cache-Control':'no-cache',&#13;
            'Authorization': 'Bearer ' + token&#13;
        },&#13;
        errorHandler: {					//Defines a retry mechanism in case of failed requests&#13;
            numberOfRetries: 3,			//Number of retries&#13;
            retryWaitInterval: 15,			//Polling interval in seconds&#13;
            errorsToRetry: ["Read timed out"]	//Specific errors to retry (Default: ["Connection pool shut down"])&#13;
        }&#13;
    }&#13;
};&#13;
System.debug("Requesting Extension for " + exp);&#13;
System.debug(JSON.stringify(requestContent));&#13;
//var urlTemplate = "workflows/{id}";&#13;
&#13;
var httpData = restClient.post(request.path, request.params, request.content, request.options);&#13;
if (httpData.statusCode != 201){&#13;
    throw "Error calling API. Received Status Code: " + httpData.statusCode;&#13;
}&#13;
&#13;
&#13;
</script>
        <in-binding>
            <bind name="token" type="string" export-name="token"/>
        </in-binding>
        <out-binding/>
        <description>Simple task with custom script capability.</description>
        <position y="130.0" x="180.0"/>
    </workflow-item>
    <presentation/>
    <workflow-note x="185.0" y="38.5" w="370.0" h="63.0" color="FFFFC0">
        <description>vRA 8.1</description>
    </workflow-note>
    <workflow-note x="185.0" y="109.0" w="368.0" h="61.0" color="80ffff">
        <description>CentOS &amp; vCenter</description>
    </workflow-note>
</ns2:workflow>
