<?xml version='1.0' encoding='UTF-8'?>
<dunes-script-module name="generateAWXMediatorWorkflow" result-type="Any" api-version="6.0.0" id="d4d22b41-7099-47e8-97ad-9989bea8f7ee" version="0.0.1" category-name="com.vmware.pso.types.ansible">
  <param n="token" t="string"><![CDATA[]]></param>
  <param n="AWXJobTemplate" t="Any"><![CDATA[]]></param>
  <param n="vROServer" t="Any"><![CDATA[]]></param>
  <param n="typeJSON" t="Any"><![CDATA[]]></param>
  <param n="namespace" t="string"><![CDATA[]]></param>
  <param n="baseTypeName" t="string"><![CDATA[]]></param>
  <script encoded="false"><![CDATA[//get workflow content to copy:
//GET https://cava-6-240-202.eng.vmware.com/vco-controlcenter/client/api/platform/workflows/78950e9c-43b3-436c-be75-c26a3da15dc9/content/

if (AWXJobTemplate == null) {
    System.log("Skipping Workflow creation: No AWXJobTemplate specified.");
    return null;
}


//Filter out any Day 2 Events which we do not want to create here (this is done by another action).
var eventName = AWXJobTemplate.event.toLowerCase();
var supportedEvents = ["create", "update", "delete"];

if (supportedEvents.indexOf(eventName) < 0) {
    System.log("Skipping Workflow creation: event [" + eventName + "] indicates Finder or Day 2 Operation which is generated later...");
    return null;
}

var RestHostFactory = System.getModule("com.vmware.pscoe.library.rest").RestHostFactory();
var RestClient = System.getModule("com.vmware.pscoe.library.rest").RestClient();

var endpointUrl = vROServer.FQDN;
var endpointName = "vRO";
var requestContent = {};
requestContent.username = vROServer.adminUserName;
requestContent.password = vROServer.adminPassword;

var restHost = RestHostFactory.newHostWithBasicAuth(endpointUrl, endpointName, requestContent.username, requestContent.password);
var restClient = new RestClient(restHost);
var wfid = "835e19d9-841d-4614-9d82-07fb5bdf4796";
var request = {
    path: '/vco-controlcenter/client/api/platform/workflows/{wfid}/content/',
    params: [wfid],
    options: {
        skipEncodeParams: true,
        returnResponseObject: true,
        returnResponseObjectForReal: false,
        stringifyJsonContent: false,
        interpretResponseCode: false,
        headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
            'Authorization': 'Bearer ' + token
        },
        errorHandler: {					//Defines a retry mechanism in case of failed requests
            numberOfRetries: 3,			//Number of retries
            retryWaitInterval: 15,			//Polling interval in seconds
            errorsToRetry: ["Read timed out"]	//Specific errors to retry (Default: ["Connection pool shut down"])
        }
    }
};
System.debug("Fetching Template Workflow via API...");
//var urlTemplate = "workflows/{id}";

var httpData = restClient.get(request.path, request.params, request.options);
if (httpData.statusCode != 200) {
    throw "Error vRO calling API. Received Status Code: " + httpData.statusCode;
}

var wfContent = JSON.parse(httpData.contentAsString);
//System.debug(wfContent);
//System.debug(JSON.stringify(wfContent));
System.debug("Generating \"" + AWXJobTemplate.event + "\" Workflow...");

var newId = createGuid();
//System.debug(httpData.contentAsString);
var newWfName = AWXJobTemplate.event + " " + namespace + "." + typeJSON.typeName;

System.debug("Compiling objects for Workflow content...");


var inputs = { "param": [] };
var outputs = {};

var extra_vars_in_binding = [];
var extra_vars_script = generateExtraVarsScript(AWXJobTemplate, extra_vars_in_binding);

var parseScript = "";

switch (eventName) {
    case "create":
        outputs = {
            "param": [
                {
                    "name": "result",
                    "type": "DynamicTypes:" + namespace + "." + typeJSON.typeName
                }
            ]
        };
        AWXJobTemplate.extra_vars.forEach(function (e) {
            inputs.param.push({ "name": e.inputReference, "type": "string" });
        });
        inputs.param.push({ "name": "endpointName", "type": "string" });
        parseScript = getResourceContent("ReturnScript_create.txt");
        break;
    case "update":
        outputs = {
            "param": [
                {
                    "name": "result",
                    "type": "DynamicTypes:" + namespace + "." + typeJSON.typeName
                }
            ]
        };
        var idIncluded = false;
        AWXJobTemplate.extra_vars.forEach(function (e) {
            if (e.inputReference.toLowerCase() == "id") {
                e.inputReference = e.inputReference.toLowerCase();
                idIncluded = true;
            }
            inputs.param.push({ "name": e.inputReference, "type": "string" });
        });
        //check if the id is already in the inputs, otherwise include it:
        if (idIncluded == false)
            inputs.param.push({ "name": "id", "type": "string" });

        parseScript = getResourceContent("ReturnScript_default.txt");
        break;
    case "delete":
        outputs = {
            "param": [{
                "name": "result",
                "type": "string"
            }]
        };
        var idIncluded = false;
        AWXJobTemplate.extra_vars.forEach(function (e) {
            if (e.inputReference.toLowerCase() == "id") {
                e.inputReference = e.inputReference.toLowerCase();
                idIncluded = true;
            }
            inputs.param.push({ "name": e.inputReference, "type": "string" });
        });
        if (idIncluded == false)
            inputs.param.push({ "name": "id", "type": "string" });

        parseScript = getResourceContent("ReturnScript_delete.txt");
        break;
}

var typeNamesAttrib = [];

typeJSON.typeProperties.forEach(function (str) {
    typeNamesAttrib.push({ "string": { "value": str } });
});

var attribs = JSON.parse(getResourceContent("wfattribs.json"));

attribs.forEach(function (a) {
    switch (a.name) {
        case "outputMapping":
            a.value.string.value = JSON.stringify(AWXJobTemplate.outputMapping);
            break;
        case "extra_vars":
            a.value.string.value = JSON.stringify(AWXJobTemplate.extra_vars);
            break;
        case "templateId":
            a.value.string.value = AWXJobTemplate.templateId;
            break;
        case "namespace":
            a.value.string.value = namespace;
            break;
        case "typeName":
            a.value.string.value = typeJSON.typeName;
            break;
        case "typeProperties":
            a.value.array.elements = typeNamesAttrib;
            break;
    }
});

if (AWXJobTemplate.event.toLowerCase() == "create") {
    //Remove the endpointName Attribute because this will be a mandatory input:
    //Remove uniqueid on create because we won't use it on this workflow
    for (var i = 0; i < attribs.length; i++) {
        if (attribs[i].name.toLowerCase() == "endpointname" || attribs[i].name.toLowerCase() == "uniqueid") {
            attribs.splice(i, 1);
            i--;
        }
    }
}

var wfItems = JSON.parse(getResourceContent("wfitems.json"));
wfItems.forEach(function (w) {
    switch (w["display-name"]) {
        case "Parse & Assign":
            w.script.value = parseScript;
            switch (AWXJobTemplate.event.toLowerCase()) {
                case "delete":
                    w["out-binding"].bind[0].type = "string";
                    break;
                case "update":
                    w["out-binding"].bind[0].type = "DynamicTypes:" + namespace + "." + typeJSON.typeName;
                    w["in-binding"].bind.push({
                        "description": "",
                        "name": "originalId",
                        "type": "string",
                        "export-name": "id"
                    });
                    break;
                case "create":
                    w["out-binding"].bind[0].type = "DynamicTypes:" + namespace + "." + typeJSON.typeName;
                    break;
            }
            break;
        case "Prepare context":
            w.script.value = extra_vars_script;
            w["in-binding"].bind = extra_vars_in_binding;
            if (["update", "delete", "findrelations", "findbyid"].indexOf(AWXJobTemplate.event.toLowerCase()) >= 0) {
                //add endpointName to outputs of the context prep script:
                w["out-binding"].bind.push({ "name": "endpointName", "type": "string", "export-name": "endpointName" });
                w["out-binding"].bind.push({ "name": "uniqueId", "type": "string", "export-name": "uniqueId" });
            }
            break;
    }
});

wfContent["root-name"] = (eventName == "haschildren") ? "item1" : "item3";
wfContent.id = newId;
wfContent.output = outputs;
wfContent.input = inputs;
wfContent.presentation = {};
wfContent.attrib = attribs;
wfContent["workflow-item"] = wfItems;
wfContent["workflow-note"] = [];

var newWfContent = { "name": newWfName, "schema-workflow": wfContent };

request = {
    path: '/vco-controlcenter/client/api/platform/workflows',
    params: [],
    content: newWfContent,
    options: {
        skipEncodeParams: true,
        returnResponseObject: true,
        returnResponseObjectForReal: false,
        stringifyJsonContent: true,
        interpretResponseCode: false,
        headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
            'Authorization': 'Bearer ' + token
        },
        errorHandler: {					//Defines a retry mechanism in case of failed requests
            numberOfRetries: 3,			//Number of retries
            retryWaitInterval: 15,			//Polling interval in seconds
            errorsToRetry: ["Read timed out"]	//Specific errors to retry (Default: ["Connection pool shut down"])
        }
    }
};
System.debug("Creating new Workflow...");
//var urlTemplate = "workflows/{id}";

var httpData = restClient.post(request.path, request.params, request.content, request.options);
if (httpData.statusCode != 201) {
    throw "Error calling API. Received Status Code: " + httpData.statusCode;
    System.debug("request: " + JSON.stringify(request));
}
System.debug(httpData.statusCode);

var wfRef = JSON.parse(httpData.contentAsString);
//Get the new WF ID:
newId = wfRef.id;

System.debug("Tagging WF");
var newWf = Server.getWorkflowWithId(newId);

Server.tagGlobally(newWf, "achris", null);
Server.tagGlobally(newWf, namespace, typeJSON.typeName);
System.debug("Done");

return { "wfid": newId, "wfName": newWf.name };

function createGuid() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
        var r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);
        return v.toString(16);
    });
}

function getResourceContent(resourceName) {
    var cat = Server.getResourceElementCategoryWithPath("com.vmware.pso.types.ansible");
    for (var i = 0; i < cat.resourceElements.length; i++) {
        if (cat.resourceElements[i].name == resourceName) {
            return cat.resourceElements[i].getContentAsMimeAttachment().content;
        }
    }
    return null;
}

function generateExtraVarsScript(AWXJobTemplate, inputBinding) {

    var extra_vars_script = "";
    var parseId = false;
    //only add this where we have an ID being passed in by default:
    if (["update", "delete", "findrelations", "findbyid"].indexOf(AWXJobTemplate.event.toLowerCase()) >= 0) {
        extra_vars_script = "//Get Endpoint and ID from input\nvar split = id.split(\"|#|\");\nif (split.length > 1){\n  endpointName = split[1];\n}\nuniqueId = split[0];\nSystem.debug(uniqueId);\nSystem.debug(endpointName);\r\n";
        parseId = true;
    }
    extra_vars_script += 'var evars = {"extra_vars":{}};\r\n';

    AWXJobTemplate.extra_vars.forEach(function (e) {
        if (parseId == true && e.inputReference.toLowerCase() == "id")
            extra_vars_script += 'evars.extra_vars.' + e.name + ' = uniqueId;\r\n';
        else
            extra_vars_script += 'evars.extra_vars.' + e.name + ' = ' + e.inputReference + ';\r\n';

        inputBinding.push({
            "description": "",
            "name": e.inputReference,
            "type": "string",
            "export-name": e.inputReference
        });
    });
    extra_vars_script += "extra_vars = JSON.stringify(evars);\n";
    return extra_vars_script;
}
/*
"in-binding": {
            "bind": [
                {
                    "description": "",
                    "name": "endpointName",
                    "type": "string",
                    "export-name": "endpointName"
                },
                {
                    "description": "",
                    "name": "extra_vars",
                    "type": "string",
                    "export-name": "extra_vars"
                },
                {
                    "description": "",
                    "name": "templateId",
                    "type": "string",
                    "export-name": "templateId"
                },
                {
                    "description": "",
                    "name": "namespace",
                    "type": "string",
                    "export-name": "namespace"
                },
                {
                    "description": "",
                    "name": "typeName",
                    "type": "string",
                    "export-name": "typeName"
                }
            ]
        }

*/]]></script>
</dunes-script-module>