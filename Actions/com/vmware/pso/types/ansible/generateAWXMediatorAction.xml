<?xml version='1.0' encoding='UTF-8'?>
<dunes-script-module name="generateAWXMediatorAction" result-type="Any" api-version="6.0.0" id="09e2a78f-7883-41d9-80f6-50c46e394dc9" version="0.5.1" category-name="com.vmware.pso.types.ansible">
  <param n="token" t="string"><![CDATA[]]></param>
  <param n="vROServer" t="Any"><![CDATA[]]></param>
  <param n="typeJSON" t="Any"><![CDATA[]]></param>
  <param n="namespace" t="string"><![CDATA[]]></param>
  <script encoded="false"><![CDATA[
var RestHostFactory = System.getModule("com.vmware.pscoe.library.rest").RestHostFactory();
var RestClient = System.getModule("com.vmware.pscoe.library.rest").RestClient();

var endpointUrl = vROServer.FQDN;
var endpointName = "vRO";
var requestContent = {};
requestContent.username = vROServer.adminUserName;
requestContent.password = vROServer.adminPassword;

var returnObjs = [];
var finderEventNames = ["findAll", "findById", "hasChildren", "findRelations"];
var returnsMultiple = ["findRelations", "findAll"];
var eventsWithIdInput = ["findById", "hasChildren", "findRelations"]; //and any other event specified in JSON

var actionObjects = [];

iterateTemplates(typeJSON);


function iterateTemplates(type) {

    if (type.isBaseType == null || type.isBaseType == false) {
        //first the Type itself:
        type.isContainer = false;
        generateActionContent(type);
        //Now the container for the base Type, if it exists (which it always should)
        if (type.containerName != null && type.containerName.length > 0) {
            var t = type;
            t.childType = type.typeName;
            t.isContainer = true;
            generateActionContent(t);
        }
    }
}

actionObjects.forEach(function (actionObject) {
    var wfRef = JSON.parse(saveAction(actionObject.actionContent));
    var actionName = wfRef.fqn;
    //typeWorkflows.push({"wfid": wfid, "event": template.event, "typeName": typeJson.typeName});
    returnObjs.push({ "actionName": actionName, "reference": { "event": actionObject.eventName, "typeName": actionObject.typeName } });
});


System.debug("Done...");

return returnObjs;


function generateActionContent(typeObject) {

    typeObject.AWXJobTemplates.forEach(function (template) {
        //ensure we only support the base event types here
        //Also, don't generate CUD Actions for Containers:
        var typeName = (typeObject.isContainer == true ? typeObject.containerName : typeObject.typeName);
        if (finderEventNames.indexOf(template.event) >= 0) {

            System.debug("Generating \"" + template.event + "\" Action for Type: " + typeName);

            createConfigs(template, typeObject);

            var refObj = {};
            refObj.inputs = [];
            refObj.outputType = "";
            refObj.contentScript = "";

            setInAndOut(refObj, template, typeObject);

            var wfContent = {
                "output-type": refObj.outputType,
                "name": template.event + "_" + typeName,
                "module": namespace,
                "version": "0.0.1",
                "fqn": namespace + "/" + template.event + "_" + typeName,
                "script": refObj.contentScript,
                "bundleHasContent": false,
                "runtimeMemoryLimit": 0,
                "runtimeTimeout": 0,
                "input-parameters": refObj.inputs
            };

            var actionObject = { "eventName": template.event, "typeName": typeName, "actionContent": wfContent };
            actionObjects.push(actionObject);
        }

    });
}

function createGuid() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
        var r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);
        return v.toString(16);
    });
}

function setInAndOut(refObj, AWXJobTemplate, typeJSON) {
    var typeName = (typeJSON.isContainer == true ? typeJSON.containerName : typeJSON.typeName);
    switch (AWXJobTemplate.event) {
        case "findAll":
            refObj.inputs = JSON.parse(getResourceContent("findAll_InputsTemplate.json"));
            refObj.outputType = "Array/DynamicTypes:DynamicObject";
            break;
        case "findById":
            refObj.inputs = JSON.parse(getResourceContent("findById_InputsTemplate.json"));
            refObj.outputType = "DynamicTypes:" + namespace + "." + typeName;
            break;
        case "hasChildren":
            refObj.inputs = JSON.parse(getResourceContent("hasChildren_InputsTemplate.json"));
            refObj.outputType = "boolean";
            if (typeJSON.isContainer == true) {
                refObj.contentScript = "return true;"
            }
            else if (typeJSON.childTypes && typeJSON.childTypes.length > 0) {
                refObj.contentScript = "return true;"
            }
            else {
                refObj.contentScript = "return false;"
            }
            break;
        case "findRelations":
            refObj.inputs = JSON.parse(getResourceContent("findRelations_InputsTemplate.json"));
            refObj.outputType = "Array/DynamicTypes:DynamicObject";
            refObj.contentScript = generateFindRelationsScript(AWXJobTemplate);
            break;
    }
}

function generateReturnScript(AWXJobTemplate, typeJSON) {
    var typeName = (typeJSON.isContainer == true ? typeJSON.containerName : typeJSON.typeName);
    //"genericReturnScriptEscaped.txt"
    var script = getResourceContent("genericReturnScript.txt");
    script = script.replace(/{{eventName}}/g, AWXJobTemplate.event);
    script = script.replace(/{{namespace}}/g, namespace);
    script = script.replace(/{{typeName}}/g, typeName);
    script = script.replace("//|||||extravars_script|||||", generateExtraVarsScript(AWXJobTemplate));
    script = script.replace("//|||||parse_script|||||", generateParseScript(AWXJobTemplate.event));
    return script;
}

function generateFindRelationsScript(AWXJobTemplate) {
    //This script returns multiple objects. If the relation is supposed to return a Container, a differenct script will be required.

    var script = getResourceContent("findRelationsReturnScript.txt");
    script = script.replace(/{{eventName}}/g, AWXJobTemplate.event);
    script = script.replace("//|||||extravars_script|||||", generateExtraVarsScript(AWXJobTemplate));
    script = script.replace("//|||||parse_script|||||", generateParseScript(AWXJobTemplate.event));
    return script;
}

function getResourceContent(resourceName) {
    var cat = Server.getResourceElementCategoryWithPath("com.vmware.pso.types.ansible");
    for (var i = 0; i < cat.resourceElements.length; i++) {
        if (cat.resourceElements[i].name == resourceName) {
            return cat.resourceElements[i].getContentAsMimeAttachment().content;
        }
    }
    return null;
}

function saveAction(actionContent) {
    var request = {
        path: '/vco-controlcenter/client/api/platform/actions?uniqueName=true',
        params: [],
        content: actionContent,
        options: {
            skipEncodeParams: true,
            returnResponseObject: true,
            returnResponseObjectForReal: false,
            stringifyJsonContent: true,
            interpretResponseCode: false,
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json',
                'Authorization': 'Bearer ' + token
            },
            errorHandler: {					//Defines a retry mechanism in case of failed requests
                numberOfRetries: 3,			//Number of retries
                retryWaitInterval: 15,			//Polling interval in seconds
                errorsToRetry: ["Read timed out"]	//Specific errors to retry (Default: ["Connection pool shut down"])
            }
        }
    };
    System.debug("Creating new Action...");
    //var urlTemplate = "workflows/{id}";
    var restHost = RestHostFactory.newHostWithBasicAuth(endpointUrl, endpointName, requestContent.username, requestContent.password);
    var restClient = new RestClient(restHost);

    var httpData = restClient.post(request.path, request.params, request.content, request.options);
    if (httpData.statusCode != 201 && httpData.statusCode != 200) {
        System.debug(JSON.stringify(request));
        throw "Error calling API. Received Status Code: " + httpData.statusCode;
    }
    System.debug(httpData.statusCode);
    return httpData.contentAsString;
}

function generateExtraVarsScript(AWXJobTemplate) {

    var extra_vars_script = 'var evars = {"extra_vars":{}};\r\n';

    AWXJobTemplate.extra_vars.forEach(function (e) {
        extra_vars_script += 'evars.extra_vars.' + e.name + ' = ' + e.inputReference + ';\r\n';
    });
    extra_vars_script += "extra_vars = JSON.stringify(evars);\n";
    //only add this where we have an ID being passed in by default:
    if (["update", "delete", "findrelations", "findbyid"].indexOf(AWXJobTemplate.event.toLowerCase()) >= 0)
        extra_vars_script += "//Get Endpoint and ID from input\nvar split = id.split(\"|#|\");\nif (split.length > 1){\n  endpointName = split[1];\n}\nuniqueId = split[0];\nSystem.debug(uniqueId);\nSystem.debug(endpointName);";


    return extra_vars_script;
}

function generateParseScript(eventName) {
    var parseScript = "";

    if (returnsMultiple.indexOf(eventName) >= 0) {
        parseScript = getResourceContent("parseScriptReturnMulti.txt");
    } else {
        parseScript = getResourceContent("parseScriptReturnSingle.txt");
    }

    return parseScript;
}


function createConfigs(AWXJobTemplate, typeJSON) {

    try {

        var typeName = (typeJSON.isContainer == true ? typeJSON.containerName : typeJSON.typeName);
        var elem = Server.createConfigurationElement(namespace + "." + typeName, AWXJobTemplate.event);
        elem.setAttributeWithKey("typeProperties", stringy(typeJSON.typeProperties));
        elem.setAttributeWithKey("outputMapping", stringy(AWXJobTemplate.outputMapping));
        elem.setAttributeWithKey("extra_vars", stringy(AWXJobTemplate.extra_vars));
        elem.setAttributeWithKey("templateId", AWXJobTemplate.templateId);
        if (typeJSON.isContainer == true) {
            elem.setAttributeWithKey("childTypes", stringy(typeJSON.siblingContainerTypeNames));
        }
        else {
            elem.setAttributeWithKey("childTypes", stringy(typeJSON.allChildTypeNames));
        }

        elem.setAttributeWithKey("containerChildTypes", stringy(typeJSON.childContainerTypeNames));


        System.debug("Created Configuration for " + typeName+ ":" + AWXJobTemplate.event);
    }
    catch (e) {
        System.error("Unable to create Configuration: " + e.message);
    }

}

function stringy(str) {
    return JSON.stringify(str);
}]]></script>
</dunes-script-module>