<?xml version='1.0' encoding='UTF-8'?>
<dunes-script-module name="generateAWXDay2Workflows" result-type="Properties" api-version="6.0.0" id="034a899a-f4fc-4f46-b010-887bb9d42167" version="0.0.1" allowed-operations="evf" category-name="com.vmware.pso.types.ansible">
  <param n="vROServer" t="Any"><![CDATA[]]></param>
  <param n="typeJson" t="Any"><![CDATA[]]></param>
  <param n="namespace" t="string"><![CDATA[]]></param>
  <param n="token" t="string"><![CDATA[]]></param>
  <script encoded="false"><![CDATA[//day2 template: 835e19d9-841d-4614-9d82-07fb5bdf4796
var Day2Operations = typeJson.day2Operations;

var typeWorkflows = new Properties();

if (Day2Operations == null || Day2Operations.length == 0) {
    System.log("Skipping Day2 Workflow creation - none specified in input JSON...");
}
else {

    //========================== Template ========================
    var RestHostFactory = System.getModule("com.vmware.pscoe.library.rest").RestHostFactory();
    var RestClient = System.getModule("com.vmware.pscoe.library.rest").RestClient();

    var endpointUrl = vROServer.FQDN;
    var endpointName = "vRO";
    var requestContent = {};
    requestContent.username = vROServer.adminUserName;
    requestContent.password = vROServer.adminPassword;

    var restHost = RestHostFactory.newHostWithBasicAuth(endpointUrl, endpointName, requestContent.username, requestContent.password);
    var restClient = new RestClient(restHost);
    var wfid = "835e19d9-841d-4614-9d82-07fb5bdf4796";
    var request = {
        path: '/vco-controlcenter/client/api/platform/workflows/{wfid}/content/',
        params: [wfid],
        options: {
            skipEncodeParams: true,
            returnResponseObject: true,
            returnResponseObjectForReal: false,
            stringifyJsonContent: false,
            interpretResponseCode: false,
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json',
                'Authorization': 'Bearer ' + token
            },
            errorHandler: {					//Defines a retry mechanism in case of failed requests
                numberOfRetries: 3,			//Number of retries
                retryWaitInterval: 15,			//Polling interval in seconds
                errorsToRetry: ["Read timed out"]	//Specific errors to retry (Default: ["Connection pool shut down"])
            }
        }
    };
    System.debug("Fetching Template Workflow via vRO API...");
    //var urlTemplate = "workflows/{id}";

    var httpData = restClient.get(request.path, request.params, request.options);
    if (httpData.statusCode != 200) {
        throw "Error vRO calling API. Received Status Code: " + httpData.statusCode;
    }

    //========================== End Template ========================



    var templates = typeJson.AWXJobTemplates;
    var template = null;


    System.debug("Creating Workflows for Day 2 Operations...");
    var orig = httpData.contentAsString;


    Day2Operations.forEach(function (op) {
        request = null;
        template = null;

        System.debug("Iterating AWXTemplates from JSON to find \"" + op.eventName + "\" event template...");

        for (var i = 0; i < templates.length; i++) {
            var _template = templates[i];
            if (_template.event.toLowerCase() == op.eventName.toLowerCase()) {
                template = _template;
                System.debug("Found \"" + op.eventName + "\" template...");
                break;
            }
        }

        if (template == null) {
            //Update template is optional
            System.log("Skipping auto-generation of \"" + op.eventName + "\" Workflow - optional template not specified in input JSON");
        }
        else {

            System.debug("Generating \"" + op.eventName + "\" Workflow...");

            var wfContent = JSON.parse(orig);
            //System.debug(wfContent);
            //System.debug(JSON.stringify(wfContent));

            var newId = createGuid();
            //System.debug(httpData.contentAsString);
            var newWfName = op.title + "-day2- " + namespace + "." + typeJson.typeName;

            wfContent["display-name"] = newWfName;
            var inputs = { "param": [] };

            op.inputs.forEach(function (prop) {
                inputs.param.push({ "name": prop, "type": "string" });
            });

            System.debug("Compiling objects for Workflow content...");

            var extra_vars_in_binding = [];
            var extra_vars_script = generateExtraVarsScript(template, extra_vars_in_binding);

            var typeNamesAttrib = [];
            typeJson.typeProperties.forEach(function (str) {
                typeNamesAttrib.push({ "string": { "value": str } });
            });


            var outputs = {
                "param": [{
                    "name": "result",
                    "type": "string"
                }]
            };
            var idIncluded = false;

            template.extra_vars.forEach(function (e) {
                if (e.inputReference.toLowerCase() == "id") {
                    e.inputReference = "id";
                    idIncluded = true;
                }
                //Make sure we don't duplicate inputs:
                var inputExists = false;
                for (var i = 0; i < inputs.param.length; i++) {
                    if (inputs.param[i].name == e.inputReference) {
                        inputExists = true;
                        break;
                    }
                }
                if (inputExists == false)
                    inputs.param.push({ "name": e.inputReference, "type": "string" });
            });
            if (idIncluded == false)
                inputs.param.push({ "name": "id", "type": "string" });

            parseScript = getResourceContent("ReturnScript_day2.txt");

            var attribs = JSON.parse(getResourceContent("wfattribs.json"));

            attribs.forEach(function (a) {
                switch (a.name) {
                    case "outputMapping":
                        a.value.string.value = JSON.stringify(template.outputMapping);
                        break;
                    case "extra_vars":
                        a.value.string.value = JSON.stringify(template.extra_vars);
                        break;
                    case "templateId":
                        a.value.string.value = template.templateId;
                        break;
                    case "namespace":
                        a.value.string.value = namespace;
                        break;
                    case "typeName":
                        a.value.string.value = typeJson.typeName;
                        break;
                    case "typeProperties":
                        a.value.array.elements = typeNamesAttrib;
                        break;
                }
            });


            var wfItems = JSON.parse(getResourceContent("wfitems.json"));
            wfItems.forEach(function (w) {
                switch (w["display-name"]) {
                    case "Parse & Assign":
                        w.script.value = parseScript;
                        w["out-binding"].bind[0].type = "string";
                        break;
                    case "Prepare context":
                        w.script.value = extra_vars_script;
                        w["in-binding"].bind = extra_vars_in_binding;
                        //add endpointName to outputs of the context prep script:
                        w["out-binding"].bind.push({ "name": "endpointName", "type": "string", "export-name": "endpointName" });
                        w["out-binding"].bind.push({ "name": "uniqueId", "type": "string", "export-name": "uniqueId" });

                        break;
                }
            });
            wfContent["root-name"] = "item3";
            wfContent.id = newId;
            wfContent.output = outputs;
            wfContent.input = inputs;
            wfContent.presentation = {};
            wfContent.attrib = attribs;
            wfContent["workflow-item"] = wfItems;
            wfContent["workflow-note"] = [];

            var newWfContent = { "name": newWfName, "schema-workflow": wfContent };

            //POST https://cava-6-240-202.eng.vmware.com/vco-controlcenter/client/api/platform/workflows

            request = {
                path: '/vco-controlcenter/client/api/platform/workflows',
                params: [],
                content: newWfContent,
                options: {
                    skipEncodeParams: true,
                    returnResponseObject: true,
                    returnResponseObjectForReal: false,
                    stringifyJsonContent: true,
                    interpretResponseCode: false,
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json',
                        'Authorization': 'Bearer ' + token
                    },
                    errorHandler: {					//Defines a retry mechanism in case of failed requests
                        numberOfRetries: 3,			//Number of retries
                        retryWaitInterval: 15,			//Polling interval in seconds
                        errorsToRetry: ["Read timed out"]	//Specific errors to retry (Default: ["Connection pool shut down"])
                    }
                }
            };
            System.debug("Creating new Workflow for event \"" + op.eventName + "\"...");
            //var urlTemplate = "workflows/{id}";

            var httpData = restClient.post(request.path, request.params, request.content, request.options);
            if (httpData.statusCode != 201) {
                throw "Error calling API. Received Status Code: " + httpData.statusCode;
            }
            System.debug(httpData.statusCode);

            var wfRef = JSON.parse(httpData.contentAsString);
            //Get the new WF ID:
            newId = wfRef.id;

            System.debug("Tagging WF");
            var newWf = Server.getWorkflowWithId(newId);

            Server.tagGlobally(newWf, "achris", null);
            Server.tagGlobally(newWf, namespace, typeJson.typeName);

            typeWorkflows.put(newId, { "event": op.eventName, "typeName": typeJson.typeName, "pushTovRA": typeJson.pushTovRA, "wfName": wfRef.name });
        }
    });
}

return typeWorkflows;

function createGuid() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
        var r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);
        return v.toString(16);
    });
}

function getResourceContent(resourceName) {
    var cat = Server.getResourceElementCategoryWithPath("com.vmware.pso.types.ansible");
    for (var i = 0; i < cat.resourceElements.length; i++) {
        if (cat.resourceElements[i].name == resourceName) {
            return cat.resourceElements[i].getContentAsMimeAttachment().content;
        }
    }
    return null;
}

function generateExtraVarsScript(AWXJobTemplate, inputBinding) {

    var extra_vars_script = "";
    extra_vars_script = "//Get Endpoint and ID from input\nvar split = id.split(\"|#|\");\nif (split.length > 1){\n  endpointName = split[1];\n}\nuniqueId = split[0];\nSystem.debug(uniqueId);\nSystem.debug(endpointName);\r\n";
    extra_vars_script += 'var evars = {"extra_vars":{}};\r\n';
    var idIncluded = false;

    AWXJobTemplate.extra_vars.forEach(function (e) {
        if (e.inputReference.toLowerCase() == "id") {
            extra_vars_script += 'evars.extra_vars.' + e.name + ' = uniqueId;\r\n';
            idIncluded = true;
        }
        else
            extra_vars_script += 'evars.extra_vars.' + e.name + ' = ' + e.inputReference + ';\r\n';

        inputBinding.push({
            "description": "",
            "name": e.inputReference,
            "type": "string",
            "export-name": e.inputReference
        });

    });

    if (idIncluded == false) {
        inputBinding.push({
            "description": "",
            "name": "id",
            "type": "string",
            "export-name": "id"
        });
    }
    extra_vars_script += "extra_vars = JSON.stringify(evars);\n";
    return extra_vars_script;
}]]></script>
</dunes-script-module>