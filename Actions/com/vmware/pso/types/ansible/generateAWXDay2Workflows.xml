<?xml version='1.0' encoding='UTF-8'?>
<dunes-script-module name="generateAWXDay2Workflows" result-type="Properties" api-version="6.0.0" id="034a899a-f4fc-4f46-b010-887bb9d42167" version="0.0.1" category-name="com.vmware.pso.types.ansible">
  <param n="vROServer" t="Any"><![CDATA[]]></param>
  <param n="typeJson" t="Any"><![CDATA[]]></param>
  <param n="namespace" t="string"><![CDATA[]]></param>
  <param n="token" t="string"><![CDATA[]]></param>
  <script encoded="false"><![CDATA[//day2 template: 835e19d9-841d-4614-9d82-07fb5bdf4796
var Day2Operations = typeJson.day2Operations;

var typeWorkflows = new Properties();

if (Day2Operations == null || Day2Operations.length == 0) {
    System.log("Skipping Day2 Workflow creation - none specified in input JSON...")
}
else {
   
    //========================== Template ========================
    var RestHostFactory = System.getModule("com.vmware.pscoe.library.rest").RestHostFactory();
    var RestClient = System.getModule("com.vmware.pscoe.library.rest").RestClient();

    var endpointUrl = vROServer.FQDN;
    var endpointName = "vRO";
    var requestContent = {};
    requestContent.username = vROServer.adminUserName;
    requestContent.password = vROServer.adminPassword;

    var restHost = RestHostFactory.newHostWithBasicAuth(endpointUrl, endpointName, requestContent.username, requestContent.password);
    var restClient = new RestClient(restHost);
    var wfid = "835e19d9-841d-4614-9d82-07fb5bdf4796";
    var request = {
        path: '/vco-controlcenter/client/api/platform/workflows/{wfid}/content/',
        params: [wfid],
        options: {
            skipEncodeParams: true,
            returnResponseObject: true,
            returnResponseObjectForReal: false,
            stringifyJsonContent: false,
            interpretResponseCode: false,
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json',
                'Authorization': 'Bearer ' + token
            },
            errorHandler: {					//Defines a retry mechanism in case of failed requests
                numberOfRetries: 3,			//Number of retries
                retryWaitInterval: 15,			//Polling interval in seconds
                errorsToRetry: ["Read timed out"]	//Specific errors to retry (Default: ["Connection pool shut down"])
            }
        }
    };
    System.debug("Fetching Template Workflow via vRO API...");
    //var urlTemplate = "workflows/{id}";

    var httpData = restClient.get(request.path, request.params, request.options);
    if (httpData.statusCode != 200) {
        throw "Error vRO calling API. Received Status Code: " + httpData.statusCode;
    }

    //========================== End Template ========================

    

    var templates = typeJson.AWXJobTemplates;
    var template = null;


    System.debug("Creating Workflows for Day 2 Operations...");
    var orig = httpData.contentAsString;

    for each(var op in Day2Operations) {
        request = null;
        template = null;

        System.debug("Iterating AWXTemplates from JSON to find \"" + op.eventName + "\" event template...");
        for each(var _template in templates) {
            if (_template.event.toLowerCase() == op.eventName.toLowerCase()) {
                template = _template;
                System.debug("Found \"" + op.eventName + "\" template...");
                break;
            }
        }

        if (template == null) {
            //Update template is optional
            System.log("Skipping auto-generation of \"" + op.eventName + "\" Workflow - optional template not specified in input JSON");
        }
        else {

            System.debug("Generating \"" + op.eventName + "\" Workflow...");

            var wfContent = JSON.parse(orig);
            //System.debug(wfContent);
            //System.debug(JSON.stringify(wfContent));

            var newId = createGuid();
            //System.debug(httpData.contentAsString);
            var newWfName = op.title + "-day2- " + namespace + "." + typeJson.typeName;

            wfContent["display-name"] = newWfName;
            var inputs = { "param": [] };


            for each(var prop in op.inputs) {
                inputs.param.push({ "name": prop, "type": "string" });
            }

            System.debug("Compiling objects for Workflow content...");

            var extra_vars_script = 'var evars = {"extra_vars":{}};\r\n';

            for each(var e in template.extra_vars) {
                extra_vars_script += 'evars.extra_vars.' + e.name + ' = ' + e.inputReference + ';\r\n';
            }
            extra_vars_script += "extra_vars = JSON.stringify(evars);";

            var typeNamesAttrib = [];
            var extra_vars_in_binding = [];

            for each(var str in typeJson.typeProperties) {
                typeNamesAttrib.push({ "string": { "value": str } });
                extra_vars_in_binding.push({ "name": str, "type": "string", "export-name": str });
            }

            var attribs = [
                {
                    "value": {
                        "string": {
                            "value": ""
                        }
                    },
                    "type": "string",
                    "name": "responseContent"
                },
                {
                    "value": {
                        "string": {
                            "value": JSON.stringify(template.outputMapping)
                        }
                    },
                    "type": "string",
                    "name": "outputMapping"
                },
                {
                    "value": {
                        "string": {
                            "value": JSON.stringify(template.extra_vars)
                        }
                    },
                    "type": "string",
                    "name": "extra_vars"
                },
                {
                    "value": {
                        "string": {
                            "value": template.templateId
                        }
                    },
                    "type": "string",
                    "name": "templateId"
                },
                {
                    "value": {
                        "string": {
                            "value": namespace
                        }
                    },
                    "type": "string",
                    "name": "namespace"
                },
                {
                    "value": {
                        "string": {
                            "value": typeJson.typeName
                        }
                    },
                    "type": "string",
                    "name": "typeName"
                },
                {
                    "value": {
                        "array": {
                            "elements": typeNamesAttrib
                        }
                    },
                    "type": "Array/string",
                    "name": "typeProperties"
                }
            ];

            var outputs = {
                "param": [
                    {
                        "name": "result",
                        "type": "DynamicTypes:" + namespace + "." + typeJson.typeName
                    }
                ]
            };

            var wfItems = [
                {
                    "in-binding": {},
                    "out-binding": {},
                    "position": {
                        "y": 50.0,
                        "x": 460.0
                    },
                    "name": "item0",
                    "type": "end",
                    "end-mode": "0",
                    "comparator": 0
                },
                {
                    "display-name": "Parse & Assign",
                    "script": {
                        "value": "var outputObj = DynamicTypesManager.makeObject(namespace, typeName, \"1\", typeName, typeProperties);\r\n\r\nvar regexp = null;\r\nvar result = \"\";\r\nSystem.debug(\"Iterating Mapping and Parsing Ansible output...\");\r\nvar mapping = JSON.parse(outputMapping);\r\nfor each(var map in mapping){\r\n    System.debug(\"Mapping property: \" + map.typeReference);\r\n    regexp = new RegExp(map.regExp, map.regExpFlag);\r\n    System.debug(\"RegExp: \" + regexp.source + \" | Flags: \" + map.regExpFlag);\r\n\r\n    result = responseContent.match(regexp);\r\n    if (result && result.length > 1){\r\n        System.debug(\"Found value: \" + result[1]);\r\n        System.debug(map.typeReference + \":\" + result[1]);\r\n        \r\n        outputObj.setProperty(map.typeReference, result[1]);\r\n    }\r\n    else{\r\n        System.error(\"Expression returned no results\");\r\n    }\r\n}\r\n\r\nresult = outputObj;\r\n",
                        "encoded": false
                    },
                    "in-binding": {
                        "bind": [
                            {
                                "name": "responseContent",
                                "type": "string",
                                "export-name": "responseContent"
                            },
                            {
                                "name": "successful",
                                "type": "boolean",
                                "export-name": "successful"
                            },
                            {
                                "name": "outputMapping",
                                "type": "string",
                                "export-name": "outputMapping"
                            },
                            {
                                "name": "namespace",
                                "type": "string",
                                "export-name": "namespace"
                            },
                            {
                                "name": "typeName",
                                "type": "string",
                                "export-name": "typeName"
                            },
                            {
                                "name": "typeProperties",
                                "type": "Array/string",
                                "export-name": "typeProperties"
                            }
                        ]
                    },
                    "out-binding": {
                        "bind": [
                            {
                                "name": "result",
                                "type": "DynamicTypes:" + namespace + "." + typeJson.typeName,
                                "export-name": "result"
                            }
                        ]
                    },
                    "description": "Simple task with custom script capability.",
                    "position": {
                        "y": 60.0,
                        "x": 360.0
                    },
                    "name": "item1",
                    "out-name": "item0",
                    "type": "task",
                    "comparator": 0
                },
                {
                    "display-name": "Launch AWX Job",
                    "script": {
                        "value": "//Auto generated script, cannot be modified !\nactionResult = System.getModule(\"com.vmware.pso.types.ansible\").launchAWXJob(endpointName,extra_vars,templateId,namespace,typeName);\n",
                        "encoded": false
                    },
                    "in-binding": {
                        "bind": [
                            {
                                "description": "",
                                "name": "endpointName",
                                "type": "string",
                                "export-name": "EndpointName"
                            },
                            {
                                "description": "",
                                "name": "extra_vars",
                                "type": "string",
                                "export-name": "extra_vars"
                            },
                            {
                                "description": "",
                                "name": "templateId",
                                "type": "string",
                                "export-name": "templateId"
                            },
                            {
                                "description": "",
                                "name": "namespace",
                                "type": "string",
                                "export-name": "namespace"
                            },
                            {
                                "description": "",
                                "name": "typeName",
                                "type": "string",
                                "export-name": "typeName"
                            }
                        ]
                    },
                    "out-binding": {
                        "bind": [
                            {
                                "name": "actionResult",
                                "type": "string",
                                "export-name": "responseContent"
                            }
                        ]
                    },
                    "description": "Add a note to the workflow schema.",
                    "position": {
                        "y": 60.0,
                        "x": 260.0
                    },
                    "name": "item2",
                    "out-name": "item1",
                    "type": "task",
                    "script-module": "com.vmware.pso.types.ansible/launchAWXJob",
                    "comparator": 0
                },
                {
                    "display-name": "Build extra_vars",
                    "script": {
                        "value": extra_vars_script,//Build based on inputs / oututs
                        "encoded": false
                    },
                    "in-binding": {
                        "bind": extra_vars_in_binding
                    },
                    "out-binding": {
                        "bind": [
                            {
                                "name": "extra_vars",
                                "type": "string",
                                "export-name": "extra_vars"
                            }
                        ]
                    },
                    "description": "Simple task with custom script capability.",
                    "position": {
                        "y": 60.0,
                        "x": 160.0
                    },
                    "name": "item3",
                    "out-name": "item2",
                    "type": "task",
                    "comparator": 0
                }
            ];
            wfContent["root-name"] = "item3";
            wfContent["id"] = newId;
            wfContent["output"] = outputs;
            wfContent["input"] = inputs;
            wfContent["presentation"] = {};
            wfContent["attrib"] = attribs;
            wfContent["workflow-item"] = wfItems;
            wfContent["workflow-note"] = [];

            var newWfContent = { "name": newWfName, "schema-workflow": wfContent };

            //POST https://cava-6-240-202.eng.vmware.com/vco-controlcenter/client/api/platform/workflows

            request = {
                path: '/vco-controlcenter/client/api/platform/workflows',
                params: [],
                content: newWfContent,
                options: {
                    skipEncodeParams: true,
                    returnResponseObject: true,
                    returnResponseObjectForReal: false,
                    stringifyJsonContent: true,
                    interpretResponseCode: false,
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json',
                        'Authorization': 'Bearer ' + token
                    },
                    errorHandler: {					//Defines a retry mechanism in case of failed requests
                        numberOfRetries: 3,			//Number of retries
                        retryWaitInterval: 15,			//Polling interval in seconds
                        errorsToRetry: ["Read timed out"]	//Specific errors to retry (Default: ["Connection pool shut down"])
                    }
                }
            };
            System.debug("Creating new Workflow for event \"" + op.eventName + "\"...");
            //var urlTemplate = "workflows/{id}";

            var httpData = restClient.post(request.path, request.params, request.content, request.options);
            if (httpData.statusCode != 201) {
                throw "Error calling API. Received Status Code: " + httpData.statusCode;
            }
            System.debug(httpData.statusCode);

            var wfRef = JSON.parse(httpData.contentAsString);
            //Get the new WF ID:
            newId = wfRef.id;

            System.debug("Tagging WF");
            var newWf = Server.getWorkflowWithId(newId);

            Server.tagGlobally(newWf, "achris", null);
            Server.tagGlobally(newWf, namespace, typeJson.typeName);

        }

        System.debug("Done");

        typeWorkflows.put(newId, {"event": op.eventName, "typeName": typeJson.typeName, "pushTovRA": typeJson.pushTovRA, "wfName": wfRef.name});

    }
}

return typeWorkflows;

function createGuid() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
        var r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);
        return v.toString(16);
    });
}



]]></script>
</dunes-script-module>