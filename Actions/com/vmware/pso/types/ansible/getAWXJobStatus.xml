<?xml version='1.0' encoding='UTF-8'?>
<dunes-script-module name="getAWXJobStatus" result-type="boolean" api-version="6.0.0" id="a7e2087c-86bc-4e47-8345-ad475b85d15d" version="0.0.0" category-name="com.vmware.pso.types.ansible">
  <param n="endpointName" t="string"><![CDATA[]]></param>
  <param n="jobId" t="string"><![CDATA[]]></param>
  <param n="namespace" t="string"><![CDATA[]]></param>
  <param n="typeName" t="string"><![CDATA[]]></param>
  <script encoded="false"><![CDATA[var RestHostFactory = System.getModule("com.vmware.pscoe.library.rest").RestHostFactory();
var RestClient = System.getModule("com.vmware.pscoe.library.rest").RestClient();

System.debug("Fetching configs for [" + namespace + "]...");
var cat = Server.getConfigurationElementCategoryWithPath(namespace + ".Endpoints");
if (!cat){
    throw "No Configurations found for " + namespace;
}

var endpointUrl = "";//"http://10.149.88.129/";
var userName = "";
var pwd = "";
var authType = "";
var authKey = "";

var found = false;

System.debug("Fetching Settings from configs...")
try {
    for each (var elem in cat.configurationElements){
        if (elem.name == endpointName){
            endpointUrl = elem.getAttributeWithKey("host").value;
            userName = elem.getAttributeWithKey("username").value;
            pwd = elem.getAttributeWithKey("password").value;
            authType = elem.getAttributeWithKey("authType").value;
            authKey = elem.getAttributeWithKey("authKey").value;
            found = true;
            break;
        }
    }
} catch(e){
    throw "Missing Configuration values for EndPoint: " + endpointName;
}

System.debug("Obtained required configurations...");

if (!found){
    throw "Configuration element for EndPoint [" + endpointName + "] not found.";
}

System.debug("Initializing REST Host...");

var restHost = RestHostFactory.newHostWithBasicAuth(endpointUrl, endpointName, userName, pwd); 
var restClient = new RestClient(restHost);

var _headers = {
    'Accept': 'application/json' };

 if (authType == "basic" && (!userName || userName.length == 0))
    _headers.Authorization = "Basic " + authKey;
else if (authType == "oauth")
    _headers.Authorization = "Bearer " + authKey;

System.debug("Building request object...");

var request = {
    path: '/api/v2/jobs/{jobId}/',
    params: [jobId],
    options: {
        skipEncodeParams: true,	
        returnResponseObject: true,		
        returnResponseObjectForReal: false, 	
        stringifyJsonContent: true,	
        interpretResponseCode: false,	
        headers: _headers,
        errorHandler: {					//Defines a retry mechanism in case of failed requests
            numberOfRetries: 3,			//Number of retries
            retryWaitInterval: 15,			//Polling interval in seconds
            errorsToRetry: ["Read timed out"]	//Specific errors to retry (Default: ["Connection pool shut down"])
        }
    }
};

var status = "";
var failed = false;
var count = 0;

while(status != "successful" && failed == false && count < 100){
    System.debug("Waiting 5s before fetching Job Status...");
    System.sleep(5000);
    System.debug("Calling AWX API...");
    var httpData = restClient.get(request.path, request.params, request.options);
    if (httpData.statusCode != 200){
        throw "Error calling API. Received Status Code: " + httpData.statusCode;
    }

    var json = JSON.parse(httpData.contentAsString);
    
    status = json.status;
    failed = json.failed;

    if(status != "successful" && failed == false){
        System.debug("Job still running. Waiting 10s...");
        System.sleep(10000);
        count++;
    }
}
System.debug("Job completed - Status: " + status + " | failed: " + failed);

return !failed;

]]></script>
</dunes-script-module>