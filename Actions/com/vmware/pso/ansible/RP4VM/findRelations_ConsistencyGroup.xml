<?xml version='1.0' encoding='UTF-8'?>
<dunes-script-module name="findRelations_ConsistencyGroup" result-type="Array/DynamicTypes:DynamicObject" api-version="6.0.0" id="644e4811-a13b-43b0-9abe-cdf59ffc81f9" version="0.0.1" category-name="com.vmware.pso.ansible.RP4VM">
  <param n="parentType" t="string"><![CDATA[parent type]]></param>
  <param n="parentId" t="string"><![CDATA[parent id]]></param>
  <param n="relationName" t="string"><![CDATA[name of relation]]></param>
  <script encoded="false"><![CDATA[
//========================== vars =====================
var namespace = "";//get from type passed in
var id = parentId;
var parts = parentType.split(".");
var typeName = parts.pop();
namespace = parts.join(".");

//what about findById and findAll? 
//We only get a type to work with, so how will we define the endPoint on these?
//maybe force an endPoint input for these actions?
//######### fetch configs #################
System.debug("Fetching configs for [" + namespace + "." + typeName + "]...");
var cat = Server.getConfigurationElementCategoryWithPath(namespace + "." + typeName);
if (!cat) {
    throw "No Configurations found for " + namespace + "." + typeName;
}

var responseContent = "";
var endpointName = "";//Glean from Id below
var successful = false;
var uniqueId = "";
var jobId = "";

var typeProperties = [];//from config
var outputMapping = '[]';//from config
var extra_vars = '[]';//from config
var templateId = "";//from config
var childTypes = [];
var containerChildTypes = [];
var result = [];


var found = false;

System.debug("Fetching Settings from configs...")
try {
    cat.configurationElements.forEach(function (elem) {
        System.debug(elem.name);
        if (!found) {
            if (elem.name == "findRelations") {
                childTypes = JSON.parse(elem.getAttributeWithKey("childTypes").value);
                containerChildTypes = JSON.parse(elem.getAttributeWithKey("containerChildTypes").value);
                found = true;
            }
        }
    });
} catch (e) {
    throw "Missing Configuration values for events for Type: " + typeName;
}
if (!found) {
    throw "Missing Configuration values for events for Type: " + typeName;

}

childTypes.forEach(function (childTypeName) {
    if (containerChildTypes.indexOf(childTypeName) >= 0) {
        //This should return a default ObjArray[] such as:
        switch (relationName) {
            case "namespace-children":
                result.push(DynamicTypesManager.makeObject(namespace, childTypeName, childTypeName, childTypeName));
                break;
            case typeName + "-" + childTypeName:
                var endpointId = parentId.split("|#|")[1];
                result.push(DynamicTypesManager.makeObject(namespace, childTypeName, childTypeName + "|#|" + endpointId, childTypeName));
                break;
        }
    } else {
        if (relationName == typeName + "-" + childTypeName) {

            System.debug("Fetching child configs for [" + namespace + "." + childTypeName + "]...");
            var cat = Server.getConfigurationElementCategoryWithPath(namespace + "." + childTypeName);
            if (!cat) {
                throw "No child Configurations found for " + namespace + "." + childTypeName;
            }
            found = false;
            try {
                cat.configurationElements.forEach(function (elem) {
                    //System.debug(elem.name);
                    if (!found) {
                        if (elem.name == "findRelations") {
                            typeProperties = JSON.parse(elem.getAttributeWithKey("typeProperties").value);
                            outputMapping = elem.getAttributeWithKey("outputMapping").value;
                            extra_vars = elem.getAttributeWithKey("extra_vars").value;
                            templateId = elem.getAttributeWithKey("templateId").value;
                            found = true;
                        }
                    }
                });
            } catch (e) {
                throw "Missing Configuration values for events for Type: " + childTypeName;
            }
            if (!found) {
                throw "Missing Configuration values for events for Type: " + childTypeName;

            }

            //######### prepare context #################
            var evars = {"extra_vars":{}};
extra_vars = JSON.stringify(evars);
//Get Endpoint and ID from input
var split = id.split("|#|");
if (split.length > 1){
  endpointName = split[1];
}
uniqueId = split[0];
System.debug(uniqueId);
System.debug(endpointName);

            //######### launch job #################
            responseContent = System.getModule("com.vmware.pso.types.ansible").launchAWXJob(endpointName, extra_vars, templateId, namespace, childTypeName);


            //######### parse & assign  #################
            //======================= begin parse script ============================
var allResults = [];
var outputObjs = [];
var regexp = null;
var regexResult = null;
System.debug("Iterating Mappings and Parsing Ansible output...");
var mapping = JSON.parse(outputMapping);



System.debug(responseContent);

mapping.forEach(function (map) {
    System.debug("Mapping property: " + map.typeReference);

    regexp = new RegExp(map.regExp, map.regExpFlag);
    System.debug("RegExp: " + regexp.source + " | Flags: " + map.regExpFlag);

    regexResult = [];
    var ar;
    while (ar = regexp.exec(responseContent)) {
        //build an object by using the map name and the FIRST regex captured group:
        var obj = {};
        obj[map.typeReference] = ar.length > 0 ? ar[1] : null;
        regexResult.push(obj);
    };
    allResults.push(regexResult);

});


var mappedResults = [];
var columnIndex = 0;

if (allResults.length > 0) {
    allResults[0].forEach(function (results) {
        var rowIndex = 0;
        var newObj = {};
        while (rowIndex < allResults.length && columnIndex < allResults[rowIndex].length) {
            var obj = allResults[rowIndex][columnIndex];
            newObj[Object.keys(obj)[0]] = obj[Object.keys(obj)[0]];
            rowIndex++;
        }
        columnIndex++;
        mappedResults.push(newObj);
    });
}

System.debug(JSON.stringify(mappedResults));

mappedResults.forEach(function (output) {
    var obj = DynamicTypesManager.makeObject(namespace, childTypeName, "1", childTypeName, []);
    if (obj != null) {
        System.debug("Instantiated new " + childTypeName);
        for (var i = 0; i < Object.keys(output).length; i++) {
            if (Object.keys(output)[i].toLowerCase() == "id")
                obj.id = output[Object.keys(output)[i]] + "|#|" + endpointName;
            else if (Object.keys(output)[i].toLowerCase() == "name")
                obj.name = output[Object.keys(output)[i]];
            else
                obj.setProperty(Object.keys(output)[i], output[Object.keys(output)[i]]);
        }
        outputObjs.push(obj);
    } else System.error("Instantiation of type [" + namespace + "." + childTypeName + "] returned null!");
});

result = outputObjs;

//======================= end parse script ============================

        }
    }
});
System.debug(JSON.stringify(result));
return result;

]]></script>
</dunes-script-module>